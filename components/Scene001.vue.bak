<script setup>
const props = defineProps({
  assets: Object,
});
import { OrbitControls } from "@tresjs/cientos";
import { DoubleSide, EquirectangularReflectionMapping, Vector2 } from "three";

// import { EffectComposer, UnrealBloom } from "@tresjs/post-processing/three";

import { EffectComposer } from "three/addons/postprocessing/EffectComposer.js";
import { RenderPass } from "three/addons/postprocessing/RenderPass.js";
import { UnrealBloomPass } from "three/addons/postprocessing/UnrealBloomPass.js";
import { OutputPass } from "three/addons/postprocessing/OutputPass.js";

const { fitSize, width, height } = useWindowSize();
const { scene, camera, renderer } = useTres();
const { onBeforeRender, render } = useLoop();

props.assets.hdr.mapping = EquirectangularReflectionMapping;
scene.value.environment = props.assets.hdr;

const diamondRef = shallowRef();

let renderScene, bloomPass, outputPass, composer;

onBeforeRender(({ delta, elapsed }) => {
  if (diamondRef.value) {
    diamondRef.value.rotation.y += delta * 0.1;
  }
});

render(({ renderer, scene, camera }) => {
  composer.render();
});

onMounted(() => {
  renderScene = new RenderPass(scene.value, camera.value);
  bloomPass = new UnrealBloomPass(
    new Vector2(width.value, height.value),
    0.05, // strength
    0.05, // radius
    1 // threshold
  );

  outputPass = new OutputPass();

  composer = new EffectComposer(renderer.value);
  composer.addPass(renderScene);
  composer.addPass(bloomPass);
  composer.addPass(outputPass);
});
</script>

<template>
  <PixelPerspectiveCamera :perspective="200">
    <!-- PLANE -->
    <TresMesh :position="[0, 0, -fitSize * 2]" :scale="fitSize * 2.2">
      <TresPlaneGeometry :args="[1, 1]" />
      <TresMeshBasicMaterial
        :map="props.assets.textures[1024]"
        :needsUpdate="true"
      />
    </TresMesh>

    <OrbitControls makeDefault />
  </PixelPerspectiveCamera>

  <TresGroup name="scene001" :scale="fitSize">
    <!-- PLANE -->
    <!-- <TresMesh :position="[0, 0, -2]" :scale="3.5">
      <TresPlaneGeometry :args="[1, 1]" />
      <TresMeshBasicMaterial
        :map="props.assets.textures[1024]"
        :needsUpdate="true"
      />
    </TresMesh> -->

    <!-- DIAMOND -->
    <TresMesh
      ref="diamondRef"
      :scale="0.25"
      :geometry="props.assets.meshes.diamond.scene.children[0].geometry"
    >
      <TresMeshPhysicalMaterial
        :color="0xeffaff"
        :metalness="0"
        :roughness="0"
        :ior="2.4"
        :transmission="1"
        :specularIntensity="1"
        :specularColor="0xffffff"
        :opacity="1"
        :side="DoubleSide"
        :transparent="true"
        :thickness="2"
        :envMap="assets.hdr"
        :envMapIntensity="1"
        :reflectivity="1"
        :clearcoat="1"
        :clearcoatRoughness="0"
      />
    </TresMesh>
  </TresGroup>

  <TresAmbientLight :intensity="1" />
  <TresDirectionalLight :position="[0, 0, 1]" :intensity="1000" />

  <!-- <EffectComposer v-if="allowComposer">
    <UnrealBloom :radius="0.1" :strength="0.2" :threshold="1" />
  </EffectComposer> -->
</template>
